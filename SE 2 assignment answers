SE-Assignment-2
Assignment: Introduction to Software Engineering Instructions: Answer the following questions based on your understanding of software engineering concepts. Provide detailed explanations and examples where appropriate.

Questions: Define Software Engineering:

What is software engineering, and how does it differ from traditional programming? From my understanding it is a field that deals with the design, development, testing and maintaing of software applications that solve a set of issues.

Software Development Life Cycle (SDLC):

Explain the various phases of the Software Development Life Cycle. Provide a brief description of each phase. It is a seven phase cycle that is used during planning, creating, testing, deployment and maintenance of software. The exact number of steps may vary but idealy the phases include: 1.planning and analysis -suitability and need for the product by the client is established 2.defining requirements -information initially gathered is set into clear requirements for the team 3.design -an initial plan such as languages to be used is in the prototype is put together 4.development -the developres divide the project and code the product making a functional product 5.testing -quality assuarance teams test the software to point out uxser and security issues. 6.deployment -The product is delivered to the final user 7.maintenance -bugs and errors that may have not been spotted when testing are resolved after being spotted by users.

Agile vs. Waterfall Models:

Compare and contrast the Agile and Waterfall models of software development. What are the key differences, and in what scenarios might each be preferred? Waterfall model arranges all phases sequentally with each depending on outcome of the previous one while agile model involves arranging SDLC phases into several cycles with the team delivering small changes in each cycle. While agile is more preffered for it`s flexibility, waterfall follows the SDLC and is hence less flexible and lacks much room for changes.

Requirements Engineering:

What is requirements engineering? Describe the process and its importance in the software development lifecycle. It is the process if defining,documenting and maintaing requirements in the enginering process.It ensures proper planning and in-time completion of a software. It takes place in a process that can be brought to 4 key steps which are: 1.Familiarizing with details of the project. 2.gathering functional and non functional requirements. 3.verification and validation 4.requirement management by analyzing and communicting requirements to stake holders.

Software Design Principles:

Explain the concept of modularity in software design. How does it improve maintainability and scalability of software systems? Modularity in software design is a technique where complex software is divided into smaller, independent modules, such as functions, classes, or components. It facilitates easier management and understanding of complex systems by breaking them down.

Testing in Software Engineering:

Describe the different levels of software testing (unit testing, integration testing, system testing, acceptance testing). Why is testing crucial in software development? it improves consistency and performance. Its levels include: 1.unit testing -aimed at examining every single unit of a software system in order to make sure that it meets the original requirements and functions as expected. 2.integration testing -make sure the interconnections between the system components run as required. 3.system testing -verify the productâ€™s compliance with the functional and technical requirements and overall quality standards. 4.acceptance testing - focuses on overall system quality, from content and UI to performance issues.

Version Control Systems:

What are version control systems, and why are they important in software development? Give examples of popular version control systems and their features. Version control is a software tool that tracks and manages changes made to code over time. It allows developers to keep a record of each change, revert to earlier versions, and collaborate with team members. Examples of version control systems include Git, SVN, and Mercurial Software Project Management:

Discuss the role of a software project manager. What are some key responsibilities and challenges faced in managing software projects? The primary responsibilities of software development managers include: Making plans to design new software and web applications. Monitoring progress throughout the design process. Hiring and training software developers on the team.Some key challenges faced during management include poor communication, arising of conflicts due to misunderstandings, tight deadlines and demotivation of members. Software Maintenance:

Define software maintenance and explain the different types of maintenance activities. Why is maintenance an essential part of the software lifecycle? Software maintenance is an integral part of the software life cycle that involves modifying and updating software after it has been deployed. The goal of maintenance is to correct faults, improve performance or other attributes, and adapt the software to a changing environment throughout its lifetime. The types include: 1.Corrective Software Maintenance -addresses the errors and faults within software applications that could impact various parts of your software. 2.Adaptive Software Maintenance - implementation of changes in a part of the system, which has been affected by a change that occurred in some other part of the system. 3.Perfective Software Maintenance -adding features that can enhance user experience and removing features that are not effective and functional. 4.Preventive Software Maintenance -prevent the deterioration of your software as it continues to adapt and change..

Ethical Considerations in Software Engineering:

What are some ethical issues that software engineers might face? How can software engineers ensure they adhere to ethical standards in their work? Privacy, accuracy, property, accessibility, and effects on quality of life, are all issues that must be considered in developing and delivering computer software systems. These can be greatly reduced by providing developers with training on ethical principles, ethical decision-making frameworks, and case studies to enhance their ethical awareness

Submission Guidelines: Your answers should be well-structured, concise, and to the point. Provide real-world examples or case studies wherever possible. Cite any references or sources you use in your answers. Submit your completed assignment by [due date].
